package quartztop.analitics.controllers.restApi;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import quartztop.analitics.dtos.actions.ActionDTO;
import quartztop.analitics.dtos.actions.TelegramActionDTO;
import quartztop.analitics.integration.botApiResponses.BuilderBotResponse;
import quartztop.analitics.integration.botApiResponses.ButtonDto;
import quartztop.analitics.responses.stockResponse.StockByCategoryResponse;
import quartztop.analitics.handlers.StockByProductAndStoreHandler;
import quartztop.analitics.services.actions.ActionService;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("api/v1/bot")
@RequiredArgsConstructor
@Slf4j
public class BotController {

    private final StockByProductAndStoreHandler stockByProductAndStoreHandler;
    private final ActionService actionService;
    private final BuilderBotResponse builderBotResponse;

    @GetMapping("/actions")
    public ResponseEntity<List<TelegramActionDTO>> actions(){
        return ResponseEntity.ok(actionService.getTelegramDTO());
    }

    @GetMapping("/actions/{id}")
    public ResponseEntity<ActionDTO> getActionById(@PathVariable long id) {
        return ResponseEntity.ok(actionService.getDtoById(id));
    }
    @GetMapping("/actions/next")
    public ResponseEntity<TelegramActionDTO> getNextAction(@RequestParam(required = false) Long currentId) {
        Optional<TelegramActionDTO> nextAction = actionService.getNextAction(currentId);

        if (nextAction.isPresent()) {
            return ResponseEntity.ok(nextAction.get());
        }

        // –ï—Å–ª–∏ –∞–∫—Ü–∏–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–≤—ã–º –≤—ã–∑–æ–≤–æ–º
        String message = (currentId == null) ? "üéâ –ê–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç." : "üéâ –ë–æ–ª—å—à–µ –∞–∫—Ü–∏–π –Ω–µ—Ç.";
        return ResponseEntity.ok(TelegramActionDTO.builder().name(message).build());
    }

    @GetMapping("/stock/search")
    public ResponseEntity<List<StockByCategoryResponse>> getProductStock(@RequestParam String search) {
        log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º: {}", search);
        return ResponseEntity.ok(stockByProductAndStoreHandler.getResponseStockByProductAndStore(search));
    }
    @GetMapping("/button")
    public ResponseEntity<List<ButtonDto>> getListImageButton() {
        log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫—Ä–æ–ø–æ–∫ —Å —Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        return ResponseEntity.ok(builderBotResponse.listButtonsResponse());
    }
}
